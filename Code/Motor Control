#include <esp_now.h>
#include <WiFi.h>

// Motor pins
const int motor1Pin1 = 2;
const int motor1Pin2 = 4;
const int motor2Pin1 = 5;
const int motor2Pin2 = 18;

// Structure to receive data
typedef struct {
  char command; // 'F', 'B', 'L', 'R', 'S'
} ControlCommand;

// Callback function for receiving data
void OnDataRecv(const uint8_t* mac, const uint8_t* incomingData, int len) {
  ControlCommand command;
  memcpy(&command, incomingData, sizeof(command));

  // Execute command
  if (command.command == 'F') {
    moveForward();
  } else if (command.command == 'B') {
    moveBackward();
  } else if (command.command == 'L') {
    turnLeft();
  } else if (command.command == 'R') {
    turnRight();
  } else if (command.command == 'S') {
    stopMotors();
  }
}

void setup() {
  Serial.begin(115200);

  // Initialize motor pins
  pinMode(motor1Pin1, OUTPUT);
  pinMode(motor1Pin2, OUTPUT);
  pinMode(motor2Pin1, OUTPUT);
  pinMode(motor2Pin2, OUTPUT);

  // Initialize ESP-NOW
  WiFi.mode(WIFI_STA);
  if (esp_now_init() != ESP_OK) {
    Serial.println("Error initializing ESP-NOW");
    return;
  }

  // Register callback for receiving data
  esp_now_register_recv_cb(OnDataRecv);
}

void loop() {
  // Main loop does nothing; all work is done in the callback
}

void moveForward() {
  digitalWrite(motor1Pin1, HIGH);
  digitalWrite(motor1Pin2, LOW);
  digitalWrite(motor2Pin1, HIGH);
  digitalWrite(motor2Pin2, LOW);
}

void moveBackward() {
  digitalWrite(motor1Pin1, LOW);
  digitalWrite(motor1Pin2, HIGH);
  digitalWrite(motor2Pin1, LOW);
  digitalWrite(motor2Pin2, HIGH);
}

void turnLeft() {
  digitalWrite(motor1Pin1, LOW);
  digitalWrite(motor1Pin2, HIGH);
  digitalWrite(motor2Pin1, HIGH);
  digitalWrite(motor2Pin2, LOW);
}

void turnRight() {
  digitalWrite(motor1Pin1, HIGH);
  digitalWrite(motor1Pin2, LOW);
  digitalWrite(motor2Pin1, LOW);
  digitalWrite(motor2Pin2, HIGH);
}

void stopMotors() {
  digitalWrite(motor1Pin1, LOW);
  digitalWrite(motor1Pin2, LOW);
  digitalWrite(motor2Pin1, LOW);
  digitalWrite(motor2Pin2, LOW);
}
